#!/usr/bin/env bash
#
# Cleans up any dangling EBS volumes that are not attached to
# the EKS cluster. Also remove any pv or pvc that once claimed
# those volumes
#
# Author Luca Giugliardi
# Email: <luca.giugliardi@gmail.com>

# ----------------------------- Shell Options ---------------------------- #

set -o pipefail

# ------------------------------- Functions ------------------------------ #

get_lib_path() {
  local lib_path
  lib_path=$(cd "$(dirname "$0")" && echo "${PWD}" | sed 's/\/[^/]*$/\/lib/')
  echo "${lib_path}"
}

fetch_data() {
  # shellcheck disable=2016
  aws ec2 describe-volumes \
    --query 'Volumes[?State==`available`]' \
    --output json |
    jq -r '.[] | [
      .VolumeId,
      (.Tags[]? | select(.Key == "kubernetes.io/created-for/pvc/name").Value // ""),
      (.Tags[]? | select(.Key == "kubernetes.io/created-for/pv/name").Value // "")
      ] | @csv' |
    sed -e 's/"",//g' -e 's/,""//g'
}

filter_data() {
  local namespace
  local ebs_volume
  local pv_name
  local pvc_name

  while IFS= read -r line; do
    ebs_volume=$(awk -F, '{gsub("\"", "", $1); print $1}' <<<"${line}")
    pvc_name=$(awk -F, '{gsub("\"", "", $2); print $2}' <<<"${line}")
    pv_name=$(awk -F, '{gsub("\"", "", $3); print $3}' <<<"${line}")
    log info "Checking ${ebs_volume} EBS volume.."
    namespace=$(kubectl get pv "${pv_name}" -o jsonpath='{.spec.claimRef.namespace}' 2>/dev/null || echo "N/A")
    if [[ "${namespace}" != "N/A" ]]; then
      log info "Filtering out ${ebs_volume} as it's claimed by the ${pvc_name} PVC in the ${namespace} namespace."
      echo "${line}" >>"${tempfile}.tmp"
    else
      log info "Done."
      continue
    fi
  done <"${tempfile}"
  awk 'NR==FNR{exclude[$0];next} !($0 in exclude)' "${tempfile}".tmp "${tempfile}" >>"${tempfile}.results"
  rm "${tempfile}" "${tempfile}.tmp"
  mv "${tempfile}.results" "${tempfile}"
}

print_as_table() {
  local filename="${1}"
  local -a column_names=("${@:2}")

  printf "\n"
  sed -e 's/,/ /g' -e 's/"//g' "${filename}" |
    column -t -N "$(printf "%s," "${column_names[@]}")"
  printf "\n"
}

delete_ebs_volumes() {
  local -a ebs_volumes
  mapfile -t ebs_volumes < <(awk -F, '{gsub("\"", "", $1); print $1}' "${tempfile}")

  parallel -j 4 --halt now,fail=1 '{
    log info "Deleting EBS volume {}.."
    if aws ec2 delete-volume --volume-id "{}" >/dev/null 2>&1; then
      log info "EBS volume {} deleted."
    else
      log warn "Failed to delete EBS volume {}"
    fi
  }' ::: "${ebs_volumes[@]}"
}

main() {
  local tempfile

  check_utils "jq" "aws" "kubectl" "parallel"

  tempfile=$(mktemp -t ebs-volumes.XXXXXXXX --suffix .csv --tmpdir="${HOME}/tmp")
  trap 'rm -f "${tempfile}"' INT TERM EXIT

  if [[ ! -f "${tempfile}" ]]; then
    log error "Failed to create tempfile ${tempfile}"
    exit 1
  fi

  log info "Fetching all dangling volumes.."
  fetch_data >"${tempfile}"
  log info "Done."

  log info "Filtering out claimed volumes.."
  filter_data "${tempfile}"
  log info "Done."

  if [[ "$(wc -l <"${tempfile}")" -eq 0 ]]; then
    log info "No dagling EBS volumes eligible for deletion."
    exit 0
  fi

  log info "The followning EBS volumes will be deleted:"
  print_as_table "${tempfile}" "EBS VOLUME" "CLAIM NAME" "PV NAME"

  log info "Deleting EBS volumes.."
  delete_ebs_volumes
  log info "Done."
}

lib_path=$(get_lib_path)

# shellcheck disable=1091
source "${lib_path}/log.sh"
export -f log

# shellcheck disable=1091
source "${lib_path}/check-utils.sh"

main
