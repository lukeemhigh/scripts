#!/usr/bin/env bash
#
# Cleans up any dangling EBS volumes that are not attached to
# the EKS cluster. Also remove any pv or pvc that once claimed
# those volumes
#
# Author Luca Giugliardi
# Email: <luca.giugliardi@gmail.com>

# ----------------------------- Shell Options ---------------------------- #

set -o pipefail

# ---------------------------- Global Variables -------------------------- #

TMPDIR="${HOME}/tmp"

# ------------------------------- Functions ------------------------------ #

log() {
  local message="${2}"
  local color_reset="\033[0m"

  case "${1}" in
    "info")
      log_level="[INFO]"
      color="\033[0;32m"
      ;;
    "warning" | "warn")
      log_level="[WARNING]"
      color="\033[1;33m"
      ;;
    "debug")
      log_level="[DEBUG]"
      color="\033[1;33m"
      ;;
    "error")
      log_level="[ERROR]"
      color="\033[0;31m"
      ;;
    "" | *)
      color="\033[0m"
      ;;
  esac

  echo -e "$(date -u +"%Y-%m-%dT%H:%M:%S%:z") ${color}${log_level}${color_reset}: ${message}"
}
export -f log

fetch_data() {
  # shellcheck disable=2016
  aws ec2 describe-volumes \
    --query 'Volumes[?State==`available`]' \
    --output json |
    jq -r '.[] | [
      .VolumeId,
      (.Tags[]? | select(.Key == "kubernetes.io/created-for/pvc/name").Value // ""),
      (.Tags[]? | select(.Key == "kubernetes.io/created-for/pv/name").Value // "")
      ] | @csv' |
    sed -e 's/"",//g' -e 's/,""//g'
}

filter_data() {
  local -a retain_pvs

  mapfile -t retain_pvs < <(
    kubectl get pv -A |
      grep -i 'retain' |
      awk '{ print "\""$1"\"" }'
  )

  for pv in "${retain_pvs[@]}"; do
    sed -i -e "/${pv}/d" "${1}" \
      -e '/postgresql-backup-claim/d'
  done
}

print_as_table() {
  local filename="${1}"
  local -a column_names=("${@:2}")

  printf "\n"
  sed -e 's/,/ /g' -e 's/"//g' "${filename}" |
    column -t -N "$(printf "%s," "${column_names[@]}")"
  printf "\n"
}

delete_k8s_resources() {
  local namespace
  local pv_name
  local pvc_name
  local bound_to

  while IFS= read -r line; do
    pvc_name=$(awk -F, '{gsub("\"", "", $2); print $2}' <<<"${line}")
    pv_name=$(awk -F, '{gsub("\"", "", $3); print $3}' <<<"${line}")
    namespace=$(kubectl get pvc "${pv_name}" -o jsonpath='{spec.claimRef.namespace}' || echo "N/A")
    if [[ "${namespace}" != "N/A" ]]; then
      bound_to="$(kubectl get pvc "${pvc_name}" -n "${namespace}" -o jsonpath='{.spec.volumeName}')"
      if [[ "${pv_name}" == "${bound_to}" ]]; then
        log info "Deleting PVC ${pvc_name}.."
        kubectl patch pvc "${pvc_name}" -n "${namespace}" -p '{"metadata":{"finalizers":null}}' ||
          log warn "Failed to patch PVC ${pvc_name}" && continue
        kubectl delete pvc "${pvc_name}" -n "${namespace}" ||
          log warn "Failed to delete PVC ${pvc_name}" && continue
        log info "PVC ${pvc_name} deleted."

        log info "Deleting PersistentVolume ${pv_name}.."
        kubectl patch pv "${pv_name}" -p '{"metadata":{"finalizers":null}}' ||
          log warn "Failed to patch PersistentVolume ${pv_name}" && continue
        kubectl delete pv "${pv_name}" ||
          log warn "Failed to delete PersistentVolume ${pv_name}" && continue
        log info "PersistentVolume ${pv_name} deleted."
      else
        log info "Deleting PV ${pv_name}.."
        kubectl patch pv "${pv_name}" -p '{"metadata":{"finalizers":null}}' ||
          log warn "Failed to patch PV ${pv_name}" && continue
        kubectl delete pv "${pv_name}" ||
          log warn "Failed to delete PV ${pv_name}" && continue
      fi
    else
      log info "PersistentVolume ${pv_name} already deleted."
    fi
  done <<<"${tempfile}"
}

delete_ebs_volumes() {
  local -a ebs_volumes
  mapfile -t ebs_volumes < <(awk -F, '{gsub("\"", "", $1); print $1}' "${tempfile}")

  parallel -j 4 --halt now,fail=1 '{
    log info "Deleting EBS volume {}.."
    if aws ec2 delete-volume --volume-id "{}" >/dev/null 2>&1; then
      log info "EBS volume {} deleted."
    else
      log warn "Failed to delete EBS volume {}"
    fi
  }' ::: "${ebs_volumes[@]}"
}

main() {
  local tempfile

  trap 'rm -f $tempfile' INT TERM EXIT
  tempfile=$(mktemp -t data.XXXXXXXX --suffix .csv)

  if [[ ! -f "${tempfile}" ]]; then
    log error "Failed to create tempfile ${tempfile}"
    exit 1
  fi

  log info "Fetching all dangling volumes.."
  fetch_data >"${tempfile}"
  log info "Done."

  log info "Filtering out persitentVolumes with a reclaim policy of \"Retain\".."
  log info "Filtering out all postgresql-backup-claims.."
  filter_data "${tempfile}"
  log info "Done."

  log info "The followning EBS volumes will be deleted:"
  print_as_table "${tempfile}" "EBS VOLUME" "CLAIM NAME" "PV NAME"

  log info "Deleting all dangling Kubernetes resources.."
  delete_k8s_resources
  log info "Done."

  log info "Deleting EBS volumes.."
  delete_ebs_volumes
  log info "Done."
}

main
