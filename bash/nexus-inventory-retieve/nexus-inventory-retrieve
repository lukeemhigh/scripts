#!/usr/bin/env bash
#
# Automate Sonatype Nexus Repository inventory retrieval through its REST APIs
#
# Author Luca Giugliardi
# Email: luca.giugliardi@gmail.com

# ----------------------------- Shell Options ----------------------------
set -o pipefail

# --------------------------- Import Functions ---------------------------

# shellcheck source=/dev/null
source "${HOME}/git-repos/scripts/bash/useful-functions/print-color.sh"

# shellcheck source=/dev/null
source "${HOME}/git-repos/scripts/bash/useful-functions/test-https.sh"

# --------------------------- Optional Flags ---------------------------

TEMP=$(getopt -o a:n --long address:,nogroups -n 'test.sh' -- "$@")

if [ $? -ne 0 ]; then
    echo "usage: $0 [--address | -a] [NEXUS_ADDRESS] [--nogroups | -n]"
    exit 1
fi

eval set -- "$TEMP"

while true; do
    case "$1" in
        -a|--address)
            address="$2"
            shift 2
            ;;
        -n|--nogroups)
            skip_group="true"
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "usage: $0 [--address | -a] [NEXUS_ADDRESS] [--nogroups | -n]"
            exit 1
            ;;
    esac
done

# If no flag is specified, prompt user for Nexus Repo address

if [ -z "$address" ]; then
    read -p "Enter your Nexus Repo Address:"$'\n> ' address
fi

# --------------------------- Global Variables ---------------------------

date=$(date +%F_%T)

output_path="${HOME}/tmp/nexus-inventory-$date"

https=$(test_https "$address")

# --------------------------- Repositories Retrieval ---------------------------

print_color "blue" "Checking https connection.."

if [[ "$https" == "true" ]]; then
    print_color "green" "Server accepts https connections. Proceeding.."
    protocol="https"
else
    print_color "red" "Server does not accept https connection. Falling back to http.."
    protocol="http"
fi

print_color "blue" "Checking repositories for ${address//:[0-9]*/}"

mkdir -p "${output_path}/assets"

curl -sn -X 'GET' \
    "${protocol}://${address}/service/rest/v1/repositories" \
    -H 'accept: application/json' | \
    jq -r '.[] | . as $e | [.name,.format,.type,.url] | @csv' \
    >> "${output_path}/${address//:[0-9]*/}-repositories-list.csv"

print_color "green" "Done writing file $output_path/${address//:[0-9]*/}-repositories-list.csv"

# --------------------------- Assets Retrieval ---------------------------

while IFS=, read -r repo type; do

    print_color "blue" "Checking assets for ${repo//\"/}"

    continuation_token="gnappo"
    i=0

    if [[ "$skip_group" == "true" ]] && [[ "${type//\"/}" == group ]]; then
        print_color "blue" "Skipping group ${repo//\"/}"
        continue
    fi

    while [ -n "${continuation_token//\"/}" ]; do

        i=$(( ++i ))

        if [ "${continuation_token//\"/}" = "gnappo" ]; then
            json_page=$(curl -sn -X 'GET' "${protocol}://${address}/service/rest/v1/assets?repository=${repo//\"/}" \
                -H 'accept: application/json')
            echo "$json_page" | jq -r '.items[] | . as $e | [.repository,.format,.id,.path,.downloadUrl] | @csv' \
                >> "${output_path}/assets/${repo//\"/}-assets-list.csv"
            continuation_token=$(echo "$json_page" | jq -r '. as $e | [.continuationToken] | @csv')
        else
            json_page=$(curl -sn -X 'GET' "${protocol}://${address}/service/rest/v1/assets?continuationToken=${continuation_token//\"/}&repository=${repo//\"/}" \
                -H 'accept: application/json')
            echo "$json_page" | jq -r '.items[] | . as $e | [.repository,.format,.id,.path,.downloadUrl] | @csv' \
                >> "${output_path}/assets/${repo//\"/}-assets-list.csv"
            continuation_token=$(echo "$json_page" | jq -r '. as $e | [.continuationToken] | @csv')
        fi

    done

    if [[ ! -s "${output_path}/assets/${repo//\"/}-assets-list.csv" ]]; then
        print_color "red" "Repo ${repo//\"/} is empty"
        rm -f "${output_path}/assets/${repo//\"/}-assets-list.csv"
    else
        print_color "white" "Done processing $i pages"
        print_color "green" "Assets found. Written list at ${output_path}/assets/${repo//\"/}-assets-list.csv"
    fi

done < <(cut -d',' -f1,3 "${output_path}/${address//:[0-9]*/}-repositories-list.csv")

unset IFS
